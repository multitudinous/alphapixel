
SET(RUSLE2_SRC_FILES
	"src/rusle2/RUSLE2.cpp"
)

SET(RUSLE2_HEADER_FILES
	"src/rusle2/RUSLE2.h"
)

SOURCE_GROUP("Header Files" FILES ${RUSLE2_HEADER_FILES} ${FIELDGRIDGEN_HEADER_FILES})
SOURCE_GROUP("Source Files" FILES ${RUSLE2_SRC_FILES} ${FIELDGRIDGEN_SRC_FILES})

INCLUDE_DIRECTORIES(
	${GDAL_INCLUDE_DIR}
)

LINK_DIRECTORIES(${GDAL_LIB_DIR})

ADD_LIBRARY(RUSLE2 SHARED ${RUSLE2_HEADER_FILES} ${RUSLE2_SRC_FILES})
ADD_LIBRARY(FieldGridGen SHARED ${FIELDGRIDGEN_HEADER_FILES} ${FIELDGRIDGEN_SRC_FILES})

ADD_EXECUTABLE(test "src/rusle2/test.cpp")
ADD_EXECUTABLE(fieldgridgentest "src/FieldGridGen/test.cpp")

TARGET_LINK_LIBRARIES(RUSLE2 ${GDAL_LIBRARY})
TARGET_LINK_LIBRARIES(FieldGridGen ${GDAL_LIBRARY})
TARGET_LINK_LIBRARIES(test RUSLE2)
# this might need RUSLE2 as well
TARGET_LINK_LIBRARIES(fieldgridgentest FieldGridGen RUSLE2)

# The archive/runtime part is so that the lib/dll pair goes into lib and bin
# respectively on Windows.
INSTALL(TARGETS RUSLE2
	ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
	LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
	RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
)

INSTALL(TARGETS FieldGridGen
	ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
	LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
	RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
)

install(FILES ${RUSLE2_HEADER_FILES}
        DESTINATION include/rusle2
        COMPONENT development)

install(FILES ${FIELDGRIDGEN_HEADER_FILES}
        DESTINATION include/FieldGridGen
        COMPONENT development)

CONFIGURE_FILE(
	"${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules/uninstall.cmake"
	"${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake"
	IMMEDIATE @ONLY
)

ADD_CUSTOM_TARGET(uninstall
	"${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake"
)

# Packaging information.
SET(CPACK_GENERATOR TGZ)
SET(CPACK_SOURCE_GENERATOR TGZ)
SET(CPACK_SOURCE_IGNORE_FILES
	"~$"
	".*.svn"
	".*build/"
	".*debug/"
	".*release/"
)

SET(RUSLE2_VERSION "0.0.1")
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "RUSLE2-${RUSLE2_VERSION}")

INCLUDE(CPack)

# Support for doxygen, if found; this will expose a "make doc" target.
FIND_PACKAGE(Doxygen)

IF(DOXYGEN_FOUND)
	CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
	ADD_CUSTOM_TARGET(doc
		${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
		COMMENT "Generating API documentation with Doxygen" VERBATIM
	)
ENDIF(DOXYGEN_FOUND)

